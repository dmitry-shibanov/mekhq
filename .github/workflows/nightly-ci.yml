#
# Builds MekHQ for CI each Night
#
# Jobs:
#
#    - nightly_ci: Build MekHQ for CI across multiple platforms
#                  and Java versions.
#

name: MekHQ Nightly CI

on: [push]    

#
# Setup the Build Scan "VCS" link for all gradle invocations
#
env:
  GRADLE_OPTS: "-Dscan.link.VCS=https://github.com/MegaMek/mekhq/commit/${{ github.sha }}"

jobs:
  nightly_ci:
    # Run this job once for each combination in the
    # matrix below.
    strategy:
      matrix:
        os:   [ubuntu-latest, windows-latest]
        java: [ 8, 11 ]
      fail-fast: false

    runs-on: ${{ matrix.os }}

    name: Nightly MekHQ CI ${{ matrix.os }} on Java ${{ matrix.java }}

    steps:

    #
    # Checkout the latest source
    # and put it in: ./mekhq
    #
    - uses: actions/checkout@v2
      with:
        path: mekhq

    #
    # Setup composite build for MekHQ
    #
    # see: https://github.com/MegaMek/megamek/wiki/Working-With-Gradle
    #
    - name: Setup Composite Build for MekHQ
      run: |
        echo "includeBuild '../megamek'" >./mekhq/settings_local.gradle
        echo "includeBuild '../megameklab'" >>./mekhq/settings_local.gradle

    #
    # Checkout the latest Megamek source
    # and put it in: ./megamek
    #
    - name: Checkout MegaMek
      uses: actions/checkout@v2
      with:
        repository: MegaMek/megamek
        path: megamek

    #
    # Checkout the latest MegaMekLab source
    # and put it in: ./megameklab
    #
    - name: Checkout MegaMekLab
      uses: actions/checkout@v2
      with:
        repository: MegaMek/megameklab
        path: megameklab

    #
    # Setup composite build for MegaMekLab
    #
    # see: https://github.com/MegaMek/megamek/wiki/Working-With-Gradle
    #
    - name: Setup Composite Build for MegaMekLab
      run: |
        echo "if (gradle.parent == null) includeBuild '../megamek'" >./megameklab/settings_local.gradle

    #
    # Setup the requested Java Version from the matrix
    #
    - name: Set up docker
      run: |
        touch Dockerfile
        echo "FROM openjdk:${{ matrix.java }}" >> Dockerfile
        echo "WORKDIR /app" >> Dockerfile
        echo "COPY ./ ./" >> Dockerfile
        echo 'RUN echo "includeBuild '../megamek'" >./mekhq/settings_local.gradle' >> Dockerfile
        echo 'RUN echo "includeBuild '../megameklab'" >>./mekhq/settings_local.gradle' >> Dockerfile
        echo 'RUN echo "if (gradle.parent == null) includeBuild '../megamek'" >./megameklab/settings_local.gradle' >> Dockerfile
        echo "WORKDIR /app/mekhq" >> Dockerfile
        echo "RUN chmod +x gradlew" >> Dockerfile
        echo 'CMD ["./gradlew", "-I", ".github/build-scan-init.gradle", "build", "--stacktrace", "--scan"]' >> Dockerfile

    - name: Run Docker
      run: |
        docker ps --all
        docker container remove $(docker container ls -aq)
        docker build .
        docker ps
        id_container=$(docker container ls -aq)
        docker run $id_container
        
        

#     - name: Set up JDK ${{ matrix.java }}
#       uses: actions/setup-java@v1
#       with:
#         java-version: ${{ matrix.java }}

    # Don't run this for Windows.
#     - name: Grant execute permission for gradlew (*nix or MacOS)
#       working-directory: mekhq
#       run: chmod +x gradlew
#       if: runner.os != 'Windows'
#     - name: All process 1
#       run: |
#         Write-Host "Get all process"
#         Get-Process
#       shell: pwsh
    # Include --stacktrace to make some build failures easier
    # to figure out.
#     - name: Build with Gradle
#       working-directory: mekhq
#       run: ./gradlew -I .github/build-scan-init.gradle build --stacktrace --scan
#     - name: All process 2
#       if: ${{ always() }}
#       run: |
#         Write-Host "Get all process"
#         Get-Process
#       shell: pwsh
